/*
数据库设计方案2.0
主要由三个表组成：users（储存用户信息）
               missions（储存任务信息）
               operations（储存用户参与活动信息）
users条目包括：
    uid 唯一，主码，注册设置
    passwd 密码
	nickname 昵称
    signature 个性签名
    img_url 头像url
    tel 电话
    school 学校
    money 余额
    credit 信用值


missions条目包括：
    mid 唯一，主码，自增
	title 标题
    uid 同users uid，发起者
    reward 报酬 
    mtype 活动类型
    description 描述
    imgs_url 描述图片url
    people_limit 人数限额
    people 已参加人数
    ing 正在进行/结束

operations条目包括：
    oid 唯一，主码，自增
    uid 同users中uid，活动参加者id（发起参加）
    mid 同missions中mid 参加的任务id

操作说明：
    找活动:
        查询:根据全部或者某一活动类型，前端在页面加载时发送mtype（一个或多个），后端收到请求查询missions，根据mtype和ing，返回符合要求的条目，
            前端解析后显示。前端解析时，比对获取条目的uid和当前用户uid，显示不一致的条目（即不显示自己发布的）

        参加:前端点击参加按钮后重新发送mid到后端（保证实时性，重新获取条目信息）查看对应条目的people_limit和people，若相等，前端返回人满信息。查看ing，若false
            则显示活动停止消息。若通过人数和ing检查，发送用户X的uid和该任务mid，后端根据mid修改条目的people。同时，operations增加一个条目，填入uid，mid。

    发布活动:
        前端发送uid，title，reward，mtype，description，imgs_url，people_limits 发送给后端，missions表新增条目。people初始为0，ing初始为true。

    我的活动：
        查询：
            我参加的：前端发送uid到后端，后端查询operations确定对应条目的mid，根据获得的mid查询missions，返回对应条目给前端。前端根据返回条目的ing判断正在进行还是已结束。
            我发布的：前端发送uid到后端，后端查询missions，返回符合对应的条目，前端根据ing来判断正在进行/已结束。
        
        取消参加：前端发送uid和mid给后端，后端查询operations删除对应条目，后端在missions中根据mid修改people。
        取消任务：前端发送mid给后端，后端查询missions，修改条目的ing为false。

    我:  
        查询：前端发送uid给后端，后端查询users返回对应条目，前端获取本人的所有信息，解析后并显示出来。
        修改：前端发送uid和修改的信息，后端根据uid在users中进行修改。

其他说明：
    1.如下建表中，数据类型、大小可根据实际情况进行修改，设置外码并非必需。
    2.思考：发布任务时需不需要提供截止时间；活动发起人应该可以查询到所有参加人信息，活动参加人应该获得活动发起人的信息。
    3.消息通知功能暂不在数据库中考虑，考虑使用微信通知API
    
*/


CREATE TABLE users (uid VARCHAR(20) PRIMARY KEY NOT NULL,
									   passwd VARCHAR(20),
									   nickname VARCHAR(20),
									   signature VARCHAR(100),
                                       img_url VARCHAR(100),
                                       tel VARCHAR(20),
                                       school VARCHAR(50),
                                       money MEDIUMINT,
                                       credit TINYINT);
						
CREATE TABLE missions(mid INT PRIMARY KEY NOT NULL,
										   title VARCHAR(50),
                                           uid VARCHAR(20) NOT NULL,
                                           reward MEDIUMINT, 
                                           mtype VARCHAR(20),
                                           description VARCHAR(500), 
                                           imgs_url VARCHAR(500) ,
                                           people_limit MEDIUMINT,
                                           people MEDIUMINT,
                                           ing BOOLEAN,
                                           FOREIGN KEY(uid) REFERENCES users(uid));
                                           
CREATE TABLE operations(oid INT PRIMARY KEY NOT NULL,
											  uid VARCHAR(20) NOT NULL,
                                              mid INT NOT NULL,
                                              FOREIGN KEY(uid) REFERENCES users(uid),
                                              FOREIGN KEY(mid) REFERENCES missions(mid)) ;
